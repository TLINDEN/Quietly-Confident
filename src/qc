#!/usr/bin/perl

# "Quietly Confident
# plain simple git-aware static site generator
# by TLINDEN <tlinden@cpan.org>
# http://www.daemon.de/QuietlyConfident

our $VERSION = '0.08';

sub path2public {
	# convert a given physical source path
	# to output path without numbering, special chars etc
	my ($path, $isfile) = @_;
	my @out;
	$path =~ s/^\.\///;  # remove ./
	foreach my $part (split /\//, $path) {
		$part =~ s/^\d*[\.\-_ ]*//;    # remove leading number
		$part =~ s/([^\w\.])/_/g;      # non word to dash
		$part =~s/([A-Z])/lc($1)/ge;   # lowercase for urls
		push @out, $part;
	}
	my $normalized = join '/', @out;
	if($isfile) {
		$normalized =~ s/index\.[a-zA-Z]*$//;
		$normalized =~ s/\.[a-zA-Z]*$/\//;
	}
	return $normalized;
}

package Gitdir;
use Moo;
use Sub::Quote;
use Data::Dumper;
use IO::All -utf8;
use Encode;

has ioall => (
        is => 'rw'
);

has hasindex => (
        is => 'rw'
);

has hasfiles => (
        is => 'rw'
);

has level => (
        is => 'rw'
);

has hasdirs => (
        is => 'rw'
);

has files => (
        is => 'rw'
);

has dirs => (
        is => 'rw'
);

sub caption {
	my $self = shift;
	my $cap = $self->ioall->name;
	$cap =~ s/.*\///;           # remove leading path parts
	$cap =~ s/^\d*[\.\-_ ]*//;  # remove leading number
	$cap =~ s/[\.\-_ ]*/ /;     # punctuation to space
	$cap =~ s/^\s*//;
	chomp $cap;
	return Encode::decode_utf8($cap);
}

sub dstpath {
	my $self = shift;
	return main::path2public($self->ioall->name);
}

sub htmlpath {
	my $self = shift;
	return main::path2public($self->ioall->name) . '/';
}

sub indexpath {
	# only used for nonexistent index.html outputs
	my $self = shift;
	return $self->dstpath . '/index.html';
}

sub menu {
	my $self = shift;
	my @objects = @{$self->dirs};

	push @objects, grep { ! $_->isindex } @{$self->files};
	
	my @menu = map { { href => $_->htmlpath, cap => $_->caption } } sort { $a->ioall->name cmp $b->ioall->name } @objects;
	return @menu;
}

1;
#####################################

package Gitfile;
use Moo;
use Sub::Quote;
use Text::Markdown 'markdown';
use Pod::Html;
use IO::All -utf8;
use URI::Encode;

has ioall => (
        is => 'rw'
);

has type => (
        is => 'rw'
);

has date => (
        is => 'rw'
);

has by => (
        is => 'rw'
);

has raw => (
        is => 'rw'
);

has git => (
        is => 'rw'
);

has isindex => (
        is => 'rw'
);

has config => (
        is => 'rw'
);

sub realpath {
	my $self = shift;
	return io->catfile($self->config->{repository}, $self->ioall->name);
}

sub filename {
	my $self = shift;
	my $path = $self->ioall->name;
	$path =~ s/.*\///;
	return $path;
}

sub cleanhtml {
	# remove headers and styling
	my ($self, $html) = @_;
	$html =~ s/<head>.*?<\/head>//sig;
	$html =~ s/<(span|font|html|body).*?>//sig;
	$html =~ s/<\/(font|span|html|body)>//sig;
	$html =~ s/class=[\w]*//gis;
        $html =~ s/style=".*?"//gis;
	$html =~ s/(style|class)=(\"|\').*?(\"|\')//sig;

	# remove Microsoft artifacts
	$html =~ s/<o:p>[^<]*<\/o:p>//sig;
	$html =~ s/<p\s*>\s*<\/p>//sig;
	# <![if !supportLists]>
	$html =~ s/<\!?\[[^\]]*\]>//sig;
	return $html;
}

sub content {
        my $self = shift;
	my ($html, $raw);
	if($self->raw) {
		$raw = $self->raw;
	}
	else {
        	$raw = io($self->realpath)->slurp;
		$self->raw($raw);
	}
        if($self->type eq 'markdown') {
                $html = markdown($raw);
        }
	elsif($self->type eq 'html') {
		$html = $self->cleanhtml($raw);
	}
	elsif($self->type eq 'pod') {
		my $raw = io("pod2html " . $self->realpath . "|")->slurp;
		#open POD, "pod2html " . $self->realpath . "|";
		#my $raw = join '', <POD>;
		#close POD;
		$html = $self->cleanhtml($raw);
	}
        else {
                $html = $raw;
        }

	# FIXME: link to thumb
	my $uri = URI::Encode->new( { encode_reserved => 0 } );
	my %img;
	while ($html =~ /(<img[^>]*>)/gsi) {
		my $imgcode = $1;
		#print "IMG: orig: $imgcode\n";
		if($imgcode =~ /src="(?<!http)([^"]*)"/is) {
			my $imguri = $1;
			#print "IMG: processing $imguri\n";
			my $imgpath = $uri->decode($imguri);
			$imgpath =~ s/.*\///;
			my $thu = $self->config->{mediapath} . "thumb" . $imgpath;
			my $newimgcode = $imgcode;
			$newimgcode =~ s/(width|height)="[^"]*"//gs;
			if(-e $thu) {
				#print "IMG: is thumb\n";
				$newimgcode =~ s/\Q$imguri\E/$self->config->{media} . "thumb" . $uri->encode($imgpath)/es;
				$newimgcode = "<a href=\"" . $self->config->{media} . $imgpath . "\">$newimgcode<\/a>";
			}
			else {
				#print "IMG: no thumb\n";
				$newimgcode =~ s/\Q$imguri\E/$self->config->{media} . $imgpath/es;
			}
			$img{$imgcode} = $newimgcode;
		}
	}
	foreach my $orig (keys %img) {
		#print "IMG2: replacing $orig\n";
		#print "           with $img{$orig}\n";
		$html =~ s/\Q$orig\E/$img{$orig}/ges;
	}
	#$html =~ s/(src=")(?<!http)([^"]*)(")/$1 . $self->config->{media} . $2 . $3/ges;

	return $html;
}

sub description {
	my $self = shift;
	my $html = $self->content;
	my $des = "";
	if($html =~ /<p>([^<]*)<\/p>/s) {
		$des = $1;
		$des =~ s/<\/?[^>]*//s;
	}
	return $des;
}

sub keywords {
	my $self = shift;
	my $des = $self->description;
	my @words = grep { length($_) > 5 } split /\s\s*/, $des;
	return join ',', @words;
}

sub caption {
	my $self = shift;
	my $cap = $self->ioall->name;
	$cap =~ s/.*\///;           # remove leading path parts
	$cap =~ s/\.[^\.]*$//;      # remove suffix
	$cap =~ s/^\d*[\.\-_ ]*//;  # remove leading number
	$cap =~ s/[\.\-_ ]*/ /;     # punctuation to space
	$cap =~ s/^\s*//;
	chomp $cap;
	return Encode::decode_utf8($cap);
}

sub dstpath {
	# physical destination file
        my $self = shift;
	my $out  = main::path2public($self->ioall->name, 1);
	return $out . "index.html";
}

sub htmlpath {
	# used for links
	my $self = shift;
	my $out  = main::path2public($self->ioall->name, 1);
	return $out;
}

sub blogpath {
	# used for blog entries
	my $self = shift;
	my $out  = main::path2public($self->ioall->name, 1);
	$out =~ s/^blog[^\/]*//;
	$out =~ s/\///g;
	my ($sec,$min,$hour,$mday,$mon,$year,$wday,$yday,$isdst) = localtime($self->date);
	$mon++;
	$year += 1900;
	$out = sprintf "blog/%04d/%02d/%02d/$out/", $year, $mon, $mday;
	return $out;
}

sub dstblogpath {
	# physical destination file
        my $self = shift;
	my $out  = $self->blogpath;
	return $out . "index.html";
}

sub basepath {
	# dir one level above
	my $self = shift;
	my $out  = main::path2public($self->ioall->name, 1);
	$out     =~ s/\/[^\/]*\/$/\//;
	return $out;
}

#####################################

package main;

use Git::Repository;
use Git::Repository 'Log';
use Config::General qw(ParseConfig);
use File::Path qw(make_path);
use Template;
use Data::Dumper;
use HTTP::Server::Brick;
use POSIX qw( WNOHANG setsid );
use IO::All -utf8;

my %types = qw(jpg image png image jpeg image gif image txt markdown md markdown html html htm html pod pod xhtml html);
my %config;
my %menu;
my @images;
my $git;
my $command = shift;
my $workdir = shift;

if(! $command) {
	$command = "usage";
}

if($workdir) {
	if (! -d $workdir) {
		print STDERR "workdir $workdir does not exist or is not accessible!\n";
		exit 1;
	}
	else {
		chdir $workdir;
	}
}
else {
	$workdir = `pwd`;
	chomp $workdir;
}

if(-e "qc.conf") {
	%config = ParseConfig(-ConfigFile => "qc.conf", -AutoTrue => 1);
}
else {
	if($command ne "init") {
		die "Could not open config file qc.conf!\nConsider running $0 init\n";
	}
}

no strict "refs";
my @allowed = qw(watch daemon init generate serve);
if(! grep { $command eq $_ } @allowed) {
	print "Unknown command $command!\n";
	print "$@\n";
	&usage;
}

&$command;



sub generate {
	eval {
		$git = Git::Repository->new( work_tree => $config{repository} );
	};
	if($@) {
		if(! $config{local}) {
			die $@;
		}
		else {
			$@ = '';
		}
	}
	chdir $config{repository};

	my $root = &iterate(io('.'), 1);
	chdir $workdir;

	make_path($config{mediapath}, { mode => 0755, verbose => 1 });

	foreach my $img (@images) {
		my $src = $img->realpath;
		my $dst = $config{mediapath} . $img->filename;
		my $thu = $config{mediapath} . "thumb" . $img->filename;
		if (! -e $dst ) {
			&cpimg($src, $dst, $thu);
		}
		else {
			my $mtime = (stat($dst))[9];
			if($img->date > $mtime) {
				&cpimg($src, $dst, $thu);
			}
		}
	}

	&genmenus($root);
	&process($root);
}

sub cpimg {
	my($src, $dst, $thu) = @_;
	&log( "Copying image $src => $dst\n");

	system("cp \"$src\" \"$dst\"");

	open ID, "identify \"$src\"|";
	my $id = <ID>;
	close ID;

	if($id =~ / (\d+?)x(\d+?) /) {
		my $width = $1;
		my $height= $2;
  		if($width > 500) {
			&log("Image is too big ($width x $height), resizing");
			system("convert -size 500x500 \"$src\" -resize 500x500 \"$thu\"");
		}
	}

}

sub genmenus {
  require Encode;
  my $gitdir = shift;
  my $level  = $gitdir->level;
  my @menu   = $gitdir->menu;

  my $path = $gitdir->htmlpath;
  if($path eq '/') {
    $path = "root";
  }

  if ($gitdir->dstpath =~ /^blog/) {
    $menu{$path} = [];
    return;
  }

  $menu{$path} = \@menu;
  foreach my $dir (@{$gitdir->dirs}) {
    &genmenus($dir);
  }
}

sub processblog {
  my $gitdir = shift;
  my @posts = sort { $b->date <=> $a->date } @{$gitdir->files};
  my $max = 5;
  my @pages;
  if (scalar @posts > $max) {
    while (@posts) {
      my $curlen = scalar @posts;
      my @page;
      if ($curlen >= $max) {
	@page = splice(@posts, 0, $max);
      }
      else {
	@page = splice(@posts, 0);
      }
      push @pages, \@page;
    }
  }
  else {
    push @pages, \@posts;
  }
  

  my $t = Template->new(
			{ OUTPUT_PATH  => $config{public},
			  INCLUDE_PATH => $config{templates},
			  INTERPOLATE  => 1 }) || die "$Template::ERROR\n";
  my $pagenum = 0;
  foreach my $page (@pages) {
    my $dir = $gitdir->dstpath;
    if ($pagenum > 0) {
      $dir .= "/page/$pagenum";
    }
    if(! -d "$config{public}/$dir" ) {
      make_path("$config{public}/$dir", { mode => 0755, verbose => 1 });
    }

    my $file = $dir . "/index.html";

    my $prev = "page/" . ($pagenum - 1) . "/";
    my $next = "page/" . ($pagenum + 1) . "/";
    if ($pagenum == 0) {
      $prev = "";
    }
    if ($pagenum == $#pages) {
      $next = "";
    }
    if ($pagenum == 1) {
      $prev = "../..";
    }

    &log( "Processing: blog index page $pagenum => $file in $dir");
    $t->process( 'blog.tpl', { config      => \%config,
			       posts       => $page,
			       prev        => $prev,
			       next        => $next,
			       menu        => \%menu,
			       level       => $gitdir->level,
			       basepath    => $gitdir->htmlpath,
			       keywords    => $page->[0]->keywords,
			       description => $page->[0]->description,
			       title       => $page->[0]->caption }, $file) or die $t->error() . "\n";

    if ($pagenum == 0) {
      $dir  .= "/feed/";
      $file = $dir . "atom.xml";
      &log( "Processing: blog feed => $file in $dir");
      $t->process( 'atom.tpl', { config      => \%config,
				 posts       => $page,
				 updated     => $page->[0]->date,
			       }, $file) or die $t->error() . "\n";
    }

    foreach my $post (@{$page}) {
      &log( "Processing: blog post page " . $post->blogpath);
      
      $t->process( 'post.tpl', { config      => \%config,
				 post        => $post,
				 menu        => \%menu,
				 level       => $gitdir->level,
				 basepath    => $post->basepath,
				 keywords    => $post->keywords,
				 description => $post->description,
				 title       => $post->caption }, $post->dstblogpath) or die $t->error() . "\n";
    }
    $pagenum++;
  }
}


sub process {
  my $gitdir = shift;

  my $dir    = "$config{public}/" . $gitdir->dstpath;

  if(! -d "$dir" ) {
    make_path("$dir", { mode => 0755, verbose => 1 });
  }

  if ($gitdir->dstpath =~ /^blog/) {
    &processblog($gitdir);
    return;
  }

  my $t = Template->new(
			{ OUTPUT_PATH  => $config{public},
			  INCLUDE_PATH => $config{templates},
			  INTERPOLATE  => 1 }) || die "$Template::ERROR\n";
 
  foreach my $gitfile (@{$gitdir->files}) {
    my $title = $gitfile->caption;
    if($gitdir->level == 1  && $gitfile->isindex) {
      $title = $config{sitetitle};
    }
    elsif($gitfile->isindex) {
      $title = $gitdir->caption;
    }

    &log( "Processing: " . $gitfile->htmlpath . " => " . $gitfile->dstpath);
    $t->process( 'page.tpl', { config => \%config,
			       basepath => $gitfile->basepath,
			       level => $gitdir->level,
			       menu => \%menu,
			       content => $gitfile->content,
			       keywords => $gitfile->keywords,
			       description => $gitfile->description,
			       title => $title }, $gitfile->dstpath, { binmode => ':utf8' }) or die $t->error() . "\n";
  }
  
  if(! $gitdir->hasindex) {
    &log( "Processing: " . $gitdir->indexpath );
    $t->process( 'page.tpl', { config => \%config,
			       basepath => $gitdir->htmlpath, 
			       level => $gitdir->level, 
			       menu => \%menu, 
			       content => '', 
                               title => $gitdir->caption }, $gitdir->indexpath, { binmode => ':utf8' }) or die $t->error() . "\n";
  }
  
  if( $gitdir->hasdirs) {
    foreach my $dir (@{$gitdir->dirs}) {
      &process($dir);
    }
  }
}





sub type {
	my $file = shift;
	if($file =~ /\.([^\.]*)$/i) {
		my $suffix = $1;
		if (exists $types{$suffix}) {
			return $types{$suffix};
		}
	}
	return 'unknown';
}

sub iterate {
	my($dir, $level) = @_;
	printf "Iterating in %s\n", $dir->name;
	my $gitdir = Gitdir->new( files => [], dirs => [], hasindex => 0, hasdirs => 0, hasfiles => 0, level => $level);
	$gitdir->ioall( $dir );
	foreach my $file ($dir->all) {
		my $path = "$file";
		$path =~ s/^\.\///;
		$file = io($path);
		#my $ignore = $file->absolute->pathname; # magic, so that IO::All remembers where the files is located
		if( $file->is_dir ) {
			push @{$gitdir->{dirs}}, &iterate($file, $level + 1);
			$gitdir->hasdirs(1);
		}
		else {
			my $log;
			eval { ($log) = Git::Repository->log( '-1', $file ) };
			$@ = '';
			my $gitfile;
			if($log) {
				$gitfile = Gitfile->new( ioall  => $file,
							 config => \%config,
					                 type   => &type($file),
					                 date   => $log->committer_localtime,
					                 by     => $log->committer_name );
			}
			else {
				# not part of git, but use it if local option is set
				if($config{local}) {
					$gitfile = Gitfile->new( ioall  => $file,
								 config => \%config,
								 type   => &type($file),
								 date   => $file->mtime,
								 by     => (getpwuid($file->uid))[0] );
					#print "ioall file: " . $file->absolute->pathname ."\n";
				}
			}
			if($gitfile) {
				$gitdir->hasfiles(1);
				if($file =~ /^index\.(md|html|htm)$/) {
					$gitdir->hasindex(1);
					$gitfile->isindex(1);
				}
				if($gitfile->type eq 'image') {
					push @images, $gitfile;
				}
				else {
					push @{$gitdir->{files}}, $gitfile;
				}
			}
		}
	}

	return $gitdir;
}


sub usage {
	print qq(
Usage: $0 <command> [<working directory>]

Avalable commands are:
 init      - initialize a new site
 generate  - generate static content from repository
 serve     - serve site on *.8080
 daemon    - detach from terminal and run in background
 watch     - watch for updates, same as daemon but in forreground

);
	exit 1;
}


sub init {
        print "Creating qc.conf\n";
        open C, ">qc.conf" or die "Could not open qc.conf: $!\n";
        print C qq(
#        
# config file for qc tool
repository = source
public     = public_html
templates  = templates
sitetitle  = Quietly Confitent Static Site
baseuri    = /
media      = /images/
mediapath  = public_html/images/
local      = yes
);       
        close C;
         
        print "Creating directories\n";
        foreach my $dir (qw(source public_html templates public_html)) {
                make_path($dir, { mode => 0755, verbose => 1 });
        }
         
        print "Creating basic templates\n";
        my $data = join "", <DATA>;
        $data =~ s/^begin \d{3} IGNORE\n//;
        $data =~ s/end$//;
        my $zipfile = unpack("u", $data);
         
        open Z, ">init.zip" or die "Could not extract initialization data: $!\n";
        print Z $zipfile;
        close Z;
         
        system("unzip -q init.zip") and die "Could not unzip init data: $!\n";
        unlink "init.zip";

        print "Creating static site\n";
        %config = ParseConfig(-ConfigFile => 'qc.conf', -AutoTrue => 1);
}

sub serve {
	my $httpd = HTTP::Server::Brick->new(port=>8080);
	$httpd->mount('/' => { path => $config{public}});
	$httpd->start;
}

sub daemon {
	chdir $workdir;
	my $git;

	$System::Command::QUIET = 1;

	open LOG, ">> $workdir/qc.log" or die "Could not open daemon logfile $workdir/qc.log: $!\n";

	$SIG{CHLD} = \&REAPER;

	my $pid = fork();
	if($pid) {
		$SIG{CHLD} = \&REAPER;
		print "Forked with PID $pid\n";
		exit 0;
	}

	# child here
	setsid();
	setpgrp();

	my $pidfile = "$workdir/qc.pid";
	if($config{pidfile}) {
		$pidfile = $config{pidfile};
	}


	open P, ">$pidfile" or die "Could not open $pidfile: $!\n";
	print P "$$\n";
	close P;

	$SIG{INT}  = sub { &log("finishing on request"); exit; };
	$SIG{HUP}  = sub { &log("got SIGHUP, reloading"); exec(qw($0 daemon $workdir)); exit; };

	select LOG;
	open ERRLOG, ">$workdir/qc.stderr";
	#*STDERR = *ERRLOG;
	open STDERR, ">&", \*ERRLOG;
	$| = 1;

	&log("$0 started in daemon mode in $workdir with pid $$");

	&watch();
}

sub watch {
	my ($git) = @_;
	my $gitmode = 1;
	if(! $git) {
		$git = eval { Git::Repository->new( work_tree => $config{repository} ); };
	
		&log("\$\@: <$@>");
	
		if($@ || ! -d "$config{repository}/.git") {
			print STDERR "$config{repository} is not a git repository!\n";
			print STDERR "Watching in filesystem mode.\n";
			$gitmode = 0;
		}


	}
	if($gitmode) {
		&log("gitwatch");
		&gitwatch($git);
	}
	else {
		&log("fswatch");
		&fswatch();
	}
}

sub setlast {
	open LAST, ">${workdir}/.last" or die "Could not write to ${workdir}/.last: $!\n";
	print LAST "0\n";
	close LAST;
}

sub fswatch {
	if(! -e "${workdir}/.last") {
		&setlast;
	}
	while (1) {
		open FIND, "find $config{repository} -newer $workdir/.last|" or die "Could not execute find: $!\n";
		my $found = <FIND>;
		close FIND;
		if($found) {
			&log("observed changes in $config{repository}, generating site");
			&generate;
			&setlast;
		}
		sleep 60;
	}
}

sub gitwatch {
	my ($git) = @_;
	while (1) {
		eval { $git->run(qw(remote update)); };
		if($@) {
			&log("git remote update failed: $@");
		}
		else {
			my $status;
			eval { $status = $git->run(qw(diff master origin/master)); };
			if($@) {
				&log("git diff master origin/master failed: $@");
			}
			else {
				if($status =~ /diff \-\-git/) {
					&log("observed changes in $config{repository} on master, pulling");
					eval {$git->run(qw(pull));}; 
					if(! $@) {
						&log("git pull done. generating site");
						&generate;
					}
					else {
						&log("git pull failed with: $@");
					}
				}
			}
		}
		sleep 60;
	}
}

sub log {
	my $msg = shift;
	chomp $msg;
	if($command eq 'daemon') {
		my $time = scalar localtime;
		print "$time [$$] $msg\n";
	}
	else {
		print "$msg\n";
	}
}

no strict 'subs';
my %Kid_Status;
sub REAPER {
  my $child;
  while (($child = waitpid(-1,WNOHANG)) > 0) {
    $Kid_Status{$child} = $?;
  }
  $SIG{CHLD} = \&REAPER;  # still loathe SysV
}


__DATA__
